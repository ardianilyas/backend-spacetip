generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  USER
  ADMIN
  SUPERADMIN
  CREATOR
}

enum DonationStatus {
  PENDING
  PAID
  EXPIRED
  FAILED
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionStatus {
  SUCCESS
  FAILED
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String?
  googleId  String?   @unique
  role      RoleUser  @default(USER)

  tokens    RefreshToken[]
  creator   Creator?
  donations Donation[] @relation("DonorRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model RefreshToken {
  id          String    @id @default(uuid())
  tokenHash   String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  revoked     Boolean   @default(false)

  @@map("refresh_tokens")
}

model Creator {
  id            String        @id @default(uuid())
  username      String        @unique
  token         String?       @unique 
  balance       Int           @default(0)
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  bio           String?
  imageUrl      String?
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  donations     Donation[]    @relation("CreatorRelation")
  withdrawals   Withdrawal[]
  transactions  Transaction[]

  @@map("creators")
}

model Donation {
  id            String          @id @default(uuid())
  referenceId   String          @unique
  amount        Int
  currency      String          @default("IDR")
  status        DonationStatus  @default(PENDING)
  message       String?
  donorName     String?
  xenditQrId    String?
  expiresAt     DateTime
  paidAt        DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  creatorId     String
  donorId       String?

  creator       Creator         @relation("CreatorRelation", fields: [creatorId], references: [id])
  donor         User?           @relation("DonorRelation", fields: [donorId], references: [id])

  transaction   Transaction?    @relation("DonationTransaction")

  @@map("donations")
}

model Withdrawal {
  id                        String            @id @default(uuid())
  amount                    Int
  amountToBeTransferred     Int
  currency                  String            @default("IDR")
  status                    WithdrawalStatus  @default(PENDING)
  externalId                String            @unique
  bankCode                  String
  accountHolderName         String
  accountNumber             String

  creatorId                 String
  creator                   Creator           @relation(fields: [creatorId], references: [id])

  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt

  @@map("withdrawals")
}

model Transaction {
  id              String              @id @default(uuid())
  amount          Int
  currency        String              @default("IDR")
  paymentMethod   String
  status          TransactionStatus   @default(SUCCESS)
  xenditPaymentId String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  donationId      String    @unique
  creatorId       String

  donation        Donation  @relation("DonationTransaction", fields: [donationId], references: [id])
  creator         Creator   @relation(fields: [creatorId], references: [id])

  @@map("transactions")
}